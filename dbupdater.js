// Generated by LiveScript 1.5.0
(function(){
  this.__dbupdater__ = null;
  this.include = function(){
    var dbupdater, config, connectionString, massive, db, _, mapNamesToFields;
    if (this.__dbupdater__) {
      return this.__dbupdater__;
    }
    dbupdater = {};
    dbupdater.log = function(){
      return console.log("dbupdater tester");
    };
    config = require('./server/config.js');
    connectionString = "postgres://" + config.db.username + ":" + config.db.password + "@" + config.db.host + "/" + config.db.database;
    console.log(connectionString);
    massive = require('massive');
    db = massive.connectSync({
      connectionString: connectionString
    });
    _ = require('underscore');
    mapNamesToFields = ['SKU', 'SKU_DESC', 'SUPPLIER', 'LOT_QTY', 'LOT_TYPE', 'DONT_MATCH_START_INV', 'MIN_ORD', 'MAX_ORD', 'MY_ORDER', 'MIN_HOLD', 'MIN_ORDCYCLE', 'MAX_ORDCYCLE', 'MIN_DELCYLE', 'MAX_DELCYLE', 'SUPPLIER_ADDRESS', 'DELIVERY_ADDRESS', 'CUSTOMER', 'ATTENTION', 'CONSOLIDATE_SAME_SUPPLIER', 'ORDERING_DAYS', 'DONT_MATCH_CURRENT_INV'];
    dbupdater.update = function(sku, name, value, callback){
      var field;
      field = mapNamesToFields.indexOf(name);
      if (field === -1) {
        return callback("[" + name + " NOT FOUND]");
      }
      field = 's' + (field + 1);
      console.log(name + " = " + field);
      console.log(db.heliexdb);
      return db.mldata.find({
        s1: sku,
        node: 'settings',
        thedatatype: 'data'
      }, function(err, mldata){
        var updateFlds;
        if (err === null && mldata !== null && mldata.length > 0 && mldata[0].hasOwnProperty('id')) {
          updateFlds = {};
          updateFlds[field] = value;
          db.mldata.update({
            id: mldata[0].id
          }, updateFlds, function(err2, res){
            if (err2 === null && res[0][field] === value) {
              callback("[" + name + " UPDATED]");
            } else {
              callback("[" + name + " FAILED]");
            }
            return console.log("save error: ", err2);
          });
        } else {
          callback("[" + name + " NOT FOUND]");
        }
        return console.log("find error: ", err);
      });
    };
    return this.__dbupdater__ = dbupdater;
  };
}).call(this);
